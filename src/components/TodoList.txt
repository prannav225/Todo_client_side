import { useState, useEffect, useRef } from "react";
import "../App.css";
import axios from "axios";

const TodoList = () => {
  const [todos, setTodos] = useState([]); // Initializing an empty array

  let todo = useRef();

  const handleAddTodo = async (e) => {
    e.preventDefault();
    let taskText = todo.current.value.trim(); // Remove leading/trailing whitespace
    if (taskText !== "") {
      // Capitalize the first letter
    const formattedTask = taskText.charAt(0).toUpperCase() + taskText.slice(1);


      let taskData = {
        task: formattedTask, // capitalized Text 
      };
      console.log(taskData);
      axios
        .post("http://localhost:5001/todos", taskData)
        .then((res) => {
          alert(res.data.message);
          // Clear the input field on success
          todo.current.value = "";
        })
        .catch((err) => {
          alert(err.data.message);
        });
    }
  };

  const handleDelete = async (taskId) => {
    // window.confirm method to show a confirmation dialog
    const confirmDelete = window.confirm(
      "Are you sure you want to delete this task permanently?"
    );

    if (confirmDelete) {
      try {
        // Sending DELETE request to the backend API to delete a task
        const response = await axios.delete(
          `http://localhost:5001/todos/${taskId}`
        );
        if (response.status === 200) {
          // Updating the local state to remove the deleted task
          setTodos(todos.filter((task) => task._id !== taskId));
        } else {
          // Handle errors
          console.error("Delete request failed.");
        }
      } catch (error) {
        // Handle network errors
        console.error("Network error:", error);
      }
    }
  };

  useEffect(() => {
    // Fetching the list of tasks from the backend API
    const fetchTasks = async () => {
      try {
        const response = await axios.get("http://localhost:5001/todos");
        if (response.status === 200) {
          setTodos(response.data.tasks);
        } else {
          // Handling errors
          console.error("Fetch request failed.");
        }
      } catch (error) {
        // Handling network errors
        console.error("Network error:", error);
      }
    };
    fetchTasks();
  }, [todos]);

  return (
    <div>
      <h1>To do App</h1>
      <form action="" className="task-form">
        <input
          type="text"
          placeholder="Add your task here..."
          ref={todo}
          name="todo"
          className="input-task"
        />
        <button
          style={{ cursor: "pointer" }}
          className="material-symbols-outlined add"
          onClick={handleAddTodo}
        >
          add
        </button>
      </form>

      {/* Displaying the to-do items */}
      <div>
        <h2>
          <u>Task List</u>
        </h2>
        {todos.map((taskList, index) => (
          <div className="task-list" key={index}>
            <p>{taskList.task}</p>
            <button
              className="material-symbols-outlined delete"
              onClick={() => handleDelete(taskList._id)}
            >
              delete_forever
            </button>
          </div>
        ))}
      </div>
    </div>
  );
};

export default TodoList;
